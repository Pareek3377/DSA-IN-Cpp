//REVERSE A STRING USING RECURSION:
#include<iostream>
using namespace std;

void reverse(string& str, int i,int j){
    //base case
    if(i>j){
        return ;
    }
    swap(str[i],str[j]);
    i++;
    j--;
    //recursive call
    reverse(str,i,j);
}
int main(){
    string name="priyanshu";

    reverse(name,0,name.length()-1);

    cout<<name<<endl;

    return 0;
}

//CHECK PALINDROME WITH RECURSION :
#include<iostream>
using namespace std;
bool checkPalindrome(string str, int i, int j){
    //base case
    if(i>j){
        return true;
    }
    if(str[i] != str[j]){
        return false;
    }
    else{
        return checkPalindrome(str,i+1,j-1);  //recursive call
    }

}
int main(){
    string name="baab";
    cout<<endl;

    bool isPalindrome=checkPalindrome(name,0,name.length()-1);

    if(isPalindrome){
        cout<<"Its a Palindrome"<<endl;
    }
    else{
        cout<<"Its not a Palindrome "<<endl;
    }
    return 0;
}


//LETTER COMBINATION OF A PHONE NUMBER OR PHONE KEYPAD PROBLEM
class Solution {
private:
    void solve(string digit, string output, int index, vector<string>&ans, string mapping[]){
        //base case
        if(index >= digit.length()){
            ans.push_back(output);
            return;
        }
        int number=digit[index]-'0';
        string value=mapping[number];

        for(int i=0;i<value.length();i++){
            output.push_back(value[i]);
            solve(digit,output,index+1,ans,mapping);
            output.pop_back();
        }
    }
public:
    vector<string> letterCombinations(string digits) {
        
        vector<string>ans;
        if(digits.length()==0)
            return ans;
        
        string output;
        int index=0;
        string mapping[10]={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        solve(digits,output,index,ans,mapping);
        return ans;
        
    }
};
